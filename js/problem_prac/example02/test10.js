// 적의 핵심 정보를 수집하는 임무를 맡았습니다.
// 적국에는 총 'N'개의 성이 있으며, 이 성은 일정한 가격으로 원형으로 배열되어 있습니다.
// 조사자로부터 다음을 배웠습니다.

// - 각 지방에는 하나의 정보국이 있습니다.
// - 각 성의 정보국 점령에 대한 보상은 `rewards[i]`로 주어집니다.
// - 한 성의 정보국이 점령되면 인접한 성은 경계 상태가 되며 침범할 수 없습니다.

// 위의 조건에서 얻을 수 있는 최대 보상을 찾습니다.
// 단, 원형 배열의 특성상 첫 번째 성은 마지막 성에 인접해 있습니다.

// ## 입력 설명
// - `0 < N <= 1000`
// - `0 < 보상[i] <= 100`

// ## 출력 설명
// 달성 가능한 최대 보상의 합계를 정수로 반환

// ## 매개변수 형식
// `N = 6`
// `보상 = [5, 10, 5, 7, 5, 9]`

// ## 반환 값 형식
// `26`

// ## 입출력 설명 예시
// 인접한 성 중 하나만 침범할 수 있으므로 모든 정보소를 점령하는 것은 불가능합니다.
// 두 번째, 네 번째, 여섯 번째 성에 침입하면 최대 보상을 받을 수 있습니다.

function solution(N, rewards) {
  let res = 0;

  let sum1 = 0;
  if (N % 2 === 0) {
    for (let i = 0; i < N; i += 2) {
      sum1 += rewards[i];
    }
  } else if (N % 2 !== 0 && rewards[0] > rewards[N - 1]) {
    for (let i = 0; i < N - 1; i += 2) {
      sum1 += rewards[i];
    }
  } else if (N % 2 !== 0 && rewards[0] < rewards[N - 1]) {
    for (let i = N - 1; i > 1; i -= 2) {
      sum1 += rewards[i];
    }
  }

  let sum2 = 0;
  for (let i = 1; i < N; i += 2) {
    sum2 += rewards[i];
  }

  if (sum1 > sum2) {
    res = sum1;
  } else {
    res = sum2;
  }

  return res;
}

console.log(solution(7, [5, 10, 5, 7, 5, 9, 30]));
